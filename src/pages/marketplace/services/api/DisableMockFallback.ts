/**
 * Disable Mock Fallback - Herramienta para deshabilitar temporalmente el fallback mock
 * Esto fuerza el uso de la API real y muestra errores reales
 */

import MarketplaceApiService from './MarketplaceApiService';

export async function disableMockFallback(): Promise<void> {
  console.log('üö´ DESHABILITANDO FALLBACK MOCK - SOLO API REAL');
  console.log('=' .repeat(50));

  // Crear una versi√≥n modificada del MarketplaceApiService sin fallback
  const originalGetScreens = MarketplaceApiService.getScreens.bind(MarketplaceApiService);
  
  // Sobrescribir temporalmente el m√©todo getScreens
  MarketplaceApiService.getScreens = async function(filters = {}) {
    console.log('üéØ Llamando API real SIN fallback mock...');
    
    try {
      const result = await originalGetScreens(filters);
      console.log('‚úÖ API real funcion√≥:', result);
      return result;
    } catch (error) {
      console.error('‚ùå API real fall√≥ - NO HAY FALLBACK:', error);
      throw error; // Re-lanzar el error sin fallback
    }
  };

  console.log('‚úÖ Fallback mock deshabilitado');
  console.log('üîÑ Recarga la p√°gina para ver solo datos reales de la API');
  console.log('üí° Si no ves pantallas, es porque la API real tiene problemas');
}

export async function testRealApiOnly(): Promise<void> {
  console.log('üß™ PROBANDO SOLO API REAL - SIN MOCK');
  console.log('=' .repeat(40));

  const baseUrl = 'https://api.shareflow.me/api';
  const authToken = localStorage.getItem('authToken');
  
  try {
    const headers: HeadersInit = {
      'Content-Type': 'application/json',
    };

    if (authToken) {
      headers['Authorization'] = `Bearer ${authToken}`;
    }

    console.log('üìç Probando:', `${baseUrl}/Marketplace/screens`);
    console.log('üîë Con token:', authToken ? 'S√≠' : 'No');

    const response = await fetch(`${baseUrl}/Marketplace/screens`, {
      method: 'GET',
      headers,
    });

    console.log('üì° Status:', response.status, response.statusText);

    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ API REAL FUNCIONA:');
      console.log('üìä Datos recibidos:', data);
      
      if (data.success && data.data && data.data.screens) {
        console.log(`üéØ ${data.data.screens.length} pantallas encontradas en la API real`);
        
        if (data.data.screens.length === 0) {
          console.log('‚ö†Ô∏è LA BASE DE DATOS EST√Å VAC√çA O LAS PANTALLAS NO SON P√öBLICAS');
        } else {
          console.log('üîç Primera pantalla de la API real:');
          console.log(data.data.screens[0]);
        }
      }
    } else {
      const errorText = await response.text();
      console.error('‚ùå API REAL FALL√ì:');
      console.error('üìù Status:', response.status);
      console.error('üìù Error:', errorText);
      
      if (response.status === 401) {
        console.error('üîë PROBLEMA DE AUTENTICACI√ìN - Token inv√°lido o expirado');
      } else if (response.status === 404) {
        console.error('üö´ ENDPOINT NO ENCONTRADO - Verifica que /api/Marketplace/screens existe');
      } else if (response.status === 500) {
        console.error('üî• ERROR DEL SERVIDOR - Problema en el backend');
      }
    }

  } catch (error) {
    console.error('üö® ERROR DE CONEXI√ìN:');
    console.error(error);
    console.error('üí° Posibles causas:');
    console.error('  - Backend no est√° corriendo');
    console.error('  - URL incorrecta');
    console.error('  - Problema de CORS');
    console.error('  - Problema de red');
  }
}

// Hacer las funciones disponibles globalmente para usar desde la consola
(window as any).disableMockFallback = disableMockFallback;
(window as any).testRealApiOnly = testRealApiOnly;

// Auto-ejecutar la prueba
if (process.env.NODE_ENV === 'development') {
  setTimeout(() => {
    testRealApiOnly();
  }, 500);
}

export default { disableMockFallback, testRealApiOnly };